import com.android.ddmlib.AndroidDebugBridge
import com.android.ddmlib.NullOutputReceiver
import com.android.ddmlib.CollectingOutputReceiver

apply plugin: 'com.android.application'

android {
    /* Cameras run older android systems, e.g.
    Sony Î± 6500:
    adb shell getprop ro.build.version.release
    4.1.2
    adb shell getprop ro.build.version.sdk
    16
    */
    compileSdkVersion 23
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "info.schnatterer.pmcaFilesystemServer"
        //noinspection MinSdkTooLow
        minSdkVersion 10
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 23
        versionCode 2
        versionName "0.1.1-SNAPSHOT"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

task pushFilesToDevices {
    def src = "${project.rootDir}/testFiles/"
    def dest = "/sdcard/DCIM/TEST/"
    def files = new File(src).listFiles()
    AndroidDebugBridge.initIfNeeded(false)
    def bridge = AndroidDebugBridge.createBridge(android.adbExecutable.path, false)
    doLast {
        bridge.devices.each { device ->
            // Only push test files to emulator
            if (device.isEmulator()) {
                println "removing files from ${dest} on ${device.name}..."
                device.executeShellCommand("rm ${dest}*", NullOutputReceiver.receiver)

                println "pushing files from ${src} to ${device.name}..."
                files.each { file ->
                    device.pushFile(file.absolutePath, "${dest}${file.name}")
                }

                println "pushing test files to ${device.name} is done"
            }
        }
    }
}

tasks.whenTaskAdded { taskItem ->
    if (taskItem.name.contains("AndroidTest")) {
        taskItem.dependsOn pushFilesToDevices
    }
}


dependencies {
    compile 'com.github.ma1co.OpenMemories-Framework:framework:f8df350'
    provided 'com.github.ma1co.OpenMemories-Framework:stubs:f8df350'
    compile 'org.nanohttpd:nanohttpd-webserver:2.3.1'
    compile 'com.drewnoakes:metadata-extractor:2.14.0'

    testCompile 'junit:junit:4.12'

    androidTestCompile 'com.android.support.test:runner:1.0.2'
    androidTestCompile 'com.android.support.test:rules:1.0.2'
    //noinspection GradleDependency - newer versions don't work on Android 4.X
    androidTestCompile 'com.squareup.okhttp3:okhttp:3.4.1'
}